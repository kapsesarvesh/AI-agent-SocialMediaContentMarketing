# -*- coding: utf-8 -*-
"""text-to-image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Xgy90vY6vEfBL7U_55Vjnrwlo-SOeKq
"""

# Install necessary packages
!pip install diffusers["torch"] transformers accelerate
!pip install pyngrok Flask

# Add your ngrok authtoken here
!ngrok config add-authtoken #add token here

# Import necessary libraries
import torch
from diffusers import StableDiffusionPipeline
from flask import Flask, request, send_file
from pyngrok import ngrok
from io import BytesIO
from PIL import Image

# Initialize the Stable Diffusion model (using GPU in Colab)
pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", torch_dtype=torch.float16)
pipe = pipe.to("cuda")

# Initialize the Flask app
app = Flask(__name__)

# Define the route for image generation
@app.route('/generate_image', methods=['POST'])
def generate_image():
    # Extract the prompt from the POST request
    data = request.json
    prompt = data.get('prompt')
# h=800
# w=640
# steps=25
# guidance=7.5
# neg = "easynegative, human, lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worstquality, low quality, normal quality, jpegartifacts, signature, watermark, username, blurry, bad feet, cropped, poorly drawn hands, poorly drawn face, mutation, deformed, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, extra fingers, fewer digits, extra limbs, extra arms,extra legs, malformed limbs, fused fingers, too many fingers, long neck, cross-eyed,mutated hands, polar lowres, bad body, bad proportions, gross proportions, text, error, missing fingers, missing arms, missing legs, extra digit, extra arms, extra leg, extra foot,"

    # Generate the image using the prompt
    image = pipe(prompt).images[0] #image = pipe(prompt, height=h, width=w, num_inference_steps=steps, guidance_scale=guidance, negative_prompt=neg).images[0]


    # Save the image to a byte buffer
    img_io = BytesIO()
    image.save(img_io, 'PNG')
    img_io.seek(0)

    # Return the image as a response
    return send_file(img_io, mimetype='image/png')

# Start ngrok to expose the app
public_url = ngrok.connect(5000)
print(f"ngrok tunnel available at: {public_url}")

# Run the Flask app
app.run(port=5000)